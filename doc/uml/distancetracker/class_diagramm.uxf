<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=14
// fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>476</x>
      <y>77</y>
      <w>231</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>&lt;&lt;singleton&gt;&gt;
DistanceObservable
--
-dtList_: std::set&lt;DistanceTracker*&gt;
-currSpeed_: speed_t
--
+updateSpeed(speed: speed_t): void
+registerObserver(dt: DistanceTracker*): void
+unregisterObserver(dt: DistanceTracker*): void
+getCalibrationData(speed_t speed): uint32_t
+setCalibrationData(speed_t speed, mmToTime: uint32_t): void
+static getInstance(void): DistanceHandler&amp;
-DistanceHandler()
{innerclass
 &lt;&lt;enum&gt;&gt;
speed_t
--
FAST
SLOW
STOP
innerclass}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>427</x>
      <y>406</y>
      <w>329</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>DistanceTracker
--
-code_: int8_t
-chid_: int
-timer_: TimerService
-lastValue_: int32_t
-currSpeed_: speed_t
-mmToTimeFast_: uint32_T
-mmToTimeSlow_: uint32_T
--
+DistanceTracker(chid: int, code: int8_t)
+notify(speed: speed_t): void
+startAlarm(value: int32_t, distance: lb_distance): int32_t
+stopAlarm(void): int32_t
-registerToDistanceHandler(void): int32_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>581</x>
      <y>280</y>
      <w>91</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..n
m2=1
Register Here ^</panel_attributes>
    <additional_attributes>10.0;180.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>35</x>
      <y>392</y>
      <w>266</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>&lt;&lt;singleton&gt;&gt;
Calibration
--
-slowToFastFaktor_: double
-fastToSlowDivisor_: double
-overall[2]: std::chrono::milliseconds
-heightMeasure[2]: std::chrono::milliseconds
-sortingSwitch[2]: std::chrono::milliseconds
-outlet[2]: std::chrono::milliseconds
--
calibrate(): void
poll(sensor: sensor_t): void
getCalibration(distance: lb_distance, speed speed_t): uint32_t
getInstance(): Calibration&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>294</x>
      <y>462</y>
      <w>147</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-
m1=0..n
m2=1
&lt; get calibration data from
</panel_attributes>
    <additional_attributes>190.0;20.0;10.0;20.0</additional_attributes>
  </element>
</diagram>
